smartest_team,Да се създаде програма която приема име на csv файл като аргумент 1. Файлът е в формат една колона с числа. Програмата трябва да генерира случайни числа в интервала от 1 до 2*числото от колона 1 на входния файл. В изходния файл който трябва да се казва "името на входния"_result.csv трябва да се изведат в колона 1 само по-големите от втория подаден аргумент числа от входния файл в колона 2 случайното число което сте генерирали и в колона 3 отношението на генерираното число към числото от входния файл с точност 10 знака след десетичната запетая като резултатът трябва да е сортиран в низходящ ред по колона 3.,random_task_test.rb
smartest_team,Да се създаде програма която приема като аргумент от командния ред име на csv файл с формат Колона 1 дата на работен ден на магазин в формат dd/mm/yyyy Колона 2 парите в касата с които магазинът започва да работи Колона 3 парите в касата с които магазинът затваря. Да се намерят дните с най-голям и най–малък оборот и в изходен csv файл с име "име на входния файл"_result.csv да се изведе в Колона 1 разликата мажду двата дена в брой дни в Колона 2 оборота на деня с най-малък оборот в Колона 3 оборота на деня с най-голям оборот и в Колона 4 разлита в обората между двата дни.,shop_task_test.rb
smartest_team,1. Даден е файла "countrylist.csv" с колони:  a. пореден номер  b. Държава с. тип d. Официално име 2. Да се реализира програма която приема като първи аргумент името на файла от командния ред. 3. Да се обработи документът като трябва да се открият всички редове за който колоната "тип" отговаря на описанието "Proto Independent State" и всички държави от колоната "Официално име" трябва да са Републики (Republic of...). 4. Цялата информация за всеки ред да се запише в изходения файл "country_results.csv" 5. Резултатът да е сортиран по колоната "пореден номер" във възходящ ред,country_task_test.rb
smartest_team,Да се създаде програма която взима като първи аргумент името на csv файл. Форматът на файла е 2 колони в Колона 1 име на ученик в Колона 2 неговият среден успех. Да се намерят хората които получават стипендии. В изходния файл с име "името на входния"_result.csv да се запишат в Колона 1 името на ученика в Колона 2 парите които получава съответно за успех: за 5.50-5.59 : 25 за 5.60-5.69 : 30 за 5.70-5.79 : 35 за 5.80-5.89 : 40 за 5.90-5.99 : 45 и за 6.00 : 50. Като резултатът трябва да е сортиран по КОЛОНА 2.,marks_task_test.rb
smartest_team,Даден е csv документ с 2 колони: 1.номер на автобус, 2.час и минута на пристигане във формат hh:mm. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Като втори аргумент е даден само часът на пристигане. Да се намерят всички автобусни линий и тяхното време на пристигане, пристигащи в този час.Резултатът да се запише във изходен файл с име "името на входния"_result.csv в Колона 1 номера на автобуса а в Колона 2 точния час на пристигане. Файлът да е сортиран по възходящ ред по КОЛОНА 1.,traffic_task_test.csv
PSBS_Solutions,Да се създаде програма която приема като аргумент от командния ред име на csv файл с формат Колона 1 дата на пътуване в формат dd/mm/yyyy Колона 2 брой на пътуващи хора Колона 3 печалба от билети.В изходен csv файл с име "име на входния файл"_result.csv да се изведе в Колона 1 датата с най-много пътуващи хора  в Колона 2 броя на пътуващите хора за деня в Колона 3 печалбата за деня в Колона 4  датата с най-малко пътуващи хора в Колона 5 броя на пътуващите хора за деня и в Колона 6 печалбата за деня.,transport_task_test.rb
PSBS_Solutions,Даден е csv документ. В него са записани имена на ученици, дата, която ни интересува и 0 или 1 според това дали са влизали в дадено помещение. Форматът на документа е Име,Фамилия,Дата,0/1. Да се създаде програма, която взима като аргументи списъка на учениците и две дати. Двете дати оказват границите, в които искаме да разберем кои са учениците, които са влизали в помещението. Да се запише в csv документ всеки влизал ученик, който е влизал в помещението и датата, когато това се е случило. Изходният файл да е във формат Име Фамилия,Дата.
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_1.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е даден примерен -Клас. Да се обработи документът като се открият всички редове, в които класът съвпада точно с дадения. Да се запише следната информация в две колони: -Име -Цена, като резултата е сортиран по колоната -Цена във възходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_2.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е даден примерен -Клас. Да се обработи документът като се открият всички редове, в които подаденият като аргумент -Клас се съдържа в колоната. Да се запише следната информация в две колони: -Име -Цена, като резултата е сортиран по колоната -Име по азбучен ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_3.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена дата във формат ГГГГ-ММ-ДД. Да се обработи документът като се открият всички редове, за които датата е по.малка от дадената. Да се запише следната информация в две колони: -Име -Клас, като резултата е сортиран по колоната -Клас във низходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_4.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена примерна цена. Да се обработи документът като се открият всички редове, в които цената съвпада с подадената. Да се запише цялата информация като резултата е сортиран по колоната -Клас във възходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име. Колоната -Дата трябва да бъде преработена така, че да изгледжа като нормална дата във формат ГГГГ-ММ-ДД.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_5.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена буква. Да се обработи документът като се открият всички редове, в които името на героя завършва на дадената буква. Да се запише следната информация в две колони: -Име -Клас, като резултата е сортиран по колоната -Име от 'Z' към 'A'. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_6.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Като втори аргумент е дадена буква. Да се обработи документът като се открият всички редове, в които името на героя съдържа дадената буква. Да се запише следната информация в две колони: -Име -БройНаБуквата, като резултата е сортиран по колоната -Име по азбучен ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име.,master_test.rb
AirFap-OP,Даден е csv документ (champs.csv) с колони: -Име -Клас -Дата -Цена. Да се реализира програма, която приема като първи аргумент името на csv файла от командния ред. Програмата да е с име FirstName_LastName_7.rb. Резултатът да се запише в изходен файл #{input_file)_result.csv. Да се обработи документът като се открият първият и последният излязъл герой (най-малка и най-голяма дата). Да се запишат двата открити реда с две колони -Име и -Дата, като резултата е сортиран по колоната -Дата във възходящ ред. Колоната -Име трябва да бъде преработена така, че да изглежда като нормално име. Колоната -Дата трябва да бъде преработена така, че да изгледжа като нормална дата във формат ГГГГ-ММ-ДД.,master_test.rb
AirFap-OP,Task 8: От randnums.csv да се намери сборът на всички числа във него. Ако сборът е четно число да се вземат всички четни номера на влакове от trains.csv, ако е нечетно - всички нечетни. След това в csv файл да се запишат само тези влакове,които изминават повече от 200 км, сортирани по време на тръгване и във възходящ ред, и да се редектира така, че да са Human readable(да се премахнат ненужни разстояния,долни черти и т.н)  
AirFap-OP,Task 9: От randnums.csv да се вземат първите десет реда числа. Да се сумират по колони.След това да се извади резултата от сумирането на първата колона с този на втората.Програмата да вземе аргумет - число - от командния ред. Ако числото е по-голямо от получения резултат при изваждането на сборовете на колоните да се сортират по станция на тръгване , ако не е - по разстоянието , което изминават и да се запишат в csv файл, и да се редектира така, че да са Human readable(да се премахнат ненужни разстояния,долни черти и т.н).Сортирането да е по възходяш ред. 
AirFap-OP,Task 10: От trains.csv да се вземат само редовете с влакове,чиито влакове тръгват от Централна гара. Да се намери кои влакове имат най-добро отношение изминат път към цена на билета. В csv файл да се запишат само номерата на трите влака,които са с най-добро отношение изминат път към цена на билета,подредени по низходящ ред.
AirFap-OP,Task 11: От trains.csv да се намери кога всеки влак ще пристигне на крайната си спирка.В csv файл да се запише от къде тръгва влака и в колко ще пристигне на крайната си спирка само за влаковете, които ще пристигнат преди 16:00.
AirFap-OP,Task 12: От trains.csv да се намери сборът на цени на билети, сборът на времето на пътуване и разстоянието,което изминават всички влаковете.От randnums.csv да се вземе първото число на 7-ми ред. Ако е просто да се запише във csv файл сборът на времето на пътуване на всички влакове и сбора на цените на билетите на всички влакове,ако не е във csv файл-а да се запише сборът на разстояниета, които влаковете изминават и сбора на цените на билетите на всички. 
AirFap-OP,trains.csv изглежда така - първа колона - номер на влак, втора колона - от къде тръгва,трета колона - час на тръгване формат час:минути, четвърта колона - какво разстояние изминава,пета колона - колко време му отнема пътуването формат час:минути, шеста колона - цена на билета.
AirFap-OP,randnums.csv има две колони цели,естествени числа.
LazyGenerators,"========Задача 1=======

Да се създаде програма за проверяване на правописа.
На стандартния вход да се подаде името на файла за проверка.
Да се създаде изходен файл results.csv, който да съдържа сгрешените думи във формат:
ред във файла на съответната дума, самата дума, за кой път се среща 

За улеснение да приемем, че единствените препинателни знаци са , и .
Aко целия текст е верен, results.csv трябва да е празен файл.
Думите се извеждат във реда във който се срещат във файла.

Пример: ruby english_1.rb text.txt",test_zadacha_1.rb
LazyGenerators,"========Задача 2=======

Да се създаде програма за превод от американски до британски английски.
На стандартния вход да се подаде името на файла за превод.
Резултата да се изведе на стандартния изход.

За улеснение да приемем, че единствените препинателни знаци са , и .

Използвайте dictionary.txt.

Пример: ruby english_2.rb text.txt",test_zadacha_2.rb
LazyGenerators,"========Задача 3=======
На командния ред се подава csv файл, съдържащ следните полета:
Играч ID, резултат, най-висок резултат, игри, напуснати игри, победи, загуби, равно завършили игри, убити герои, брой умирания, асистенции, убити противникови чудовища, помилвани чудовища, убити неутрални чудовища

Да се състави програма, която намира петимата играчи с най-висок резултат в момента и тяхната статистика да се запише във нов файл, с името ""top.csv"". Играчите трябва да са сортирани по своя резултат във низходящ ред. В случай, че има двама с еднакъв резултат, то сортирането става по ID (също в низходящ ред).
При наличието на втори аргумент, файлът трябва да съръжа не 5, а колкото е указано като аргумент брой играчи.
В случай, че входният файл съдържа по-малко от указания брой играчи, то резултата трябва да съдържа всички играчи, отново сортирани.
",test_task_3.rb
LazyGenerators,"========Задача 4=======
На командния ред се подава csv файл, съдържащ следните полета (всяко поле е цяло число):
Играч ID, резултат, най-висок резултат, игри, напуснати игри, победи, загуби, равно завършили игри, убити герои, брой умирания, асистенции, убити противникови чудовища, помилвани чудовища, убити неутрални чудовища

Да се състави програма, която по даден ID на играч, намира петимата играчи преди него и петимата играчи след него в класацията.
Програмата трябва да състави файл (името се подава като аргумент), който съдържа единадесетте играчи с тяхната статистика, подредени по резултат. Ако двама играчи имат един и същ резултат, то подредбата е по ID. Подредбата е във възходящ ред
В случай, че няма играч с указаното ID, то файлът трябва да е празен.
В случай, че входният файл съдържа недостатъчно на брой играчи, то изходният файл трябва да съдържа всички играчи, в съответната подредба.
",test_task_4.rb

MartoFTW,Даден е CSV файл описващ плейлиста. Форматът е песен/изпълнител/жанр/времетраене.От командния ред като първи аргумент се подава playlist_input.csv, а като втори жанр. Да се намерят всички редове с песни в дадения жанр и да се изведът в нов файл на име playlist_task1_result.csv сортирани по времетраене(възходящ ред).,playlist_task1_test.rb
MartoFTW,Даден е CSV файл описващ плейлиста. Форматът е песен/изпълнител/жанр/времетраене.От командния ред като първи аргумент се подава playlist_input.csv, а като втори изпълнител. Да се намерят всички редове с песни на въведения изпълнител, които са по кратки от 4 мин. Да се изведът във нов файл на име playlist_task2_result.csv сортирани по времетраене(низходящ ред).,playlist_task2_test.rb
MartoFTW,Даден е CSV документ описващ работата в автосервиз.Форматът е дата/марка/цена_на_услуга/име_на_майстор. От командния ред се въвежда input файл (ARGV[0]) и име на марка (ARGV[1]). Да се намерят всички ремонти на определена марка автомобил (пример Renault), да се сортират по цена на услугата(възходящ ред) и да се запишат във изходен файл на име auto_task1_result.csv.,auto_task1_test.rb
MartoFTW,Даден е CSV документ описващ стоката в магазин. Форматът е продукт/производител/цена/срок_на_годност. От командния ред се въвежда input файл (ARGV[0]) и име на производител(ARGV[1]). Да се намери всеки продукт(ред) предлаган от въведения производител. Информацията да се сортира по цена на продукта(низходящ ред) и да се запише в изходен файл на име shop_task1_result.csv .,shop_task1_test.rb
MartoFTW,Даден е CSV документ описващ стоката в магазин. Форматът е продукт/производител/цена/срок_на_годност. От командния ред се въвежда input файл (ARGV[0]) и дата(ARGV[1]). Всички продукти(редове), които са с изтекъл срок на годност да се запишат в изходен файл, сортирани по име на производител(възходящ ред). Името на файла да е shop_task2_result.csv .,shop_task2_test.rb
MartoFTW,Даден е CSV файл описващ физическите данни на хора. Форматът е Име/Ръст/Тегло/Години.Да се намерят всички хора под дадени килограми. Като първи аргумент се подава people_input.csv, а като втори тегло без мерна единица. Всички редове с хора, които са под нормата да се запишат в people_task1_result.csv, сортирани по азбучен ред.,people_task1_test.rb
MartoFTW,Даден е CSV файл описващ физическите данни на хора. Форматът е Име/Ръст/Тегло/Години.Да се намерят всички хора по високи от даден ръст. Като първи аргумент се подава people_input.csv, а като втори ръст. Всички редове с хора, които са над този ръст или равни се записват в people_task2_result.csv, сортирани по години в низходящ ред.,people_task2_test.rb
LazyGenerators,"========Задача 5=======
На командния ред се подава csv файл, съдържащ следните полета:
Играч ID, резултат, най-висок резултат, игри, напуснати игри, победи, загуби, равно завършили игри, убити герои, брой умирания, асистенции, убити противникови чудовища, помилвани чудовища, убити неутрални чудовища

Играчите трябва да се филтрират по следния начин: Ако резултатът на играча е по-висок (или равен) от средния за всички, то този играч трябва да присъства във първия файл, в противен случай - във втория.
Имената на файловете се приемат като аргументи.
Играчите трябва да присъстват във изходните файлове, само със своето ID, резултат и най-висок резултат.
В случай, че има играчи с еднакъв резултат, то сортирането става по техният най-висок резултат. В случай, че и това съвпада, то сортирането е по ID.
Играчите във първия файл са сортирани във низходящ ред. Тези във втория файл - във възходящ ред.
",test_task_5.rb
LazyGenerators,"========Задача 6=======
На командния ред се подава csv файл, съдържащ следните полета:
Играч ID, резултат, най-висок резултат, игри, напуснати игри, победи, загуби, равно завършили игри, убити герои, брой умирания, асистенции, убити противникови чудовища, помилвани чудовища, убити неутрални чудовища

Да се състави програма, която намира грешки във записите за отделен играч.
Счита се, че има грешка, когато броят на игрите е различен от сумата на победите, загубите и равно завършилите игри.
Резултатът трябва да е csv файл (името се подава като аргумент). Файлът трябва да съдържа ID-то на играча, игрите според файла, победите, загубите, равно завършилите игри, сумата от предходните три, отклонението от стойността (реален брой игри - игри според файла).
В случай, че за даден играч отклонението е 0, то той не трябва да присъства във изходния файл.
Записите в изходния файл са в реда, в който са открити във входния.
",test_task_6.rb

MartoFTW, Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а втори марка на лаптоп. 
Намират се всички редове за тази марка и се извеждат в изходен файл с име laptops_brand_result.csv, сортирани по цена(възходящ ред).,test_laptops_brand.rb
MartoFTW,Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а като втори размер на RAM памет (пример 2 или 16). 
Намират се всички редове с лапотпи имащи този размер памет и се извеждат в изходен файл на име laptops_ram_result.csv, сортирани по име на марката(възходящ ред).,test_laptops_ram.rb
MartoFTW,Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а като втори размер на HDD (пример 250 или 1000). 
Намират си всички лаптопи с този размер памет  и се извеждат в изхозен файл на име laptops_hdd_result.csv, сортирани по цена(низходящ ред).,test_laptops_hdd.rb
MartoFTW,Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а като втори име на процесор(пример AMD). Също така програмата не трябва да е case sensitive, т.е. "InTEl" и "iNtEL" са едно и също нещо. 
Да се открият всички редове с лаптопи използващи въведения процесор и се извеждат в изхозен файл на име laptops_processor_result.csv, сортирани по брой ядра(възходящ ред).,test_laptops_processor.rb
MartoFTW,Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv, а като втори цена(пример 200 или 1200). 
Да се открият и запишат всички редове съдържащи лаптопи с цена равна или по-голяма от въведенатаи се извеждат в изхозен файл на име laptops_price_result.csv,сортирани по цена(възходящ ред).,test_laptops_price.rb
MartoFTW,laptops_quantity,test_Имаме CSV файл, описващ лаптопи. Форматът е марка,процесор,брой ядра,RAM,HDD,цена.От командния ред се въвежда като първи аргумент laptops.csv.Да се открият и запишат всички марки и бройки лаптопи с тази марка(пример Acer,2 или Apple,6) и да се запишат в laptops_quantity_result.csv под формата на [Марка,бройка], сортирани по марката във възходящ ред.,test_laptops_quantity.rb

